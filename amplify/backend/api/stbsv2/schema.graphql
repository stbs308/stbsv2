type Todo @model {
  id: ID!
  name: String!
  description: String
}

type customerTech @model @auth(rules: [
  { allow: owner },
  { allow: groups, groups: ["Admins"], mutations: [create, update, delete], queries: [list, get] },
  { allow: groups, groups: ["Asst"], mutations: [create, update], queries: [list, get] },
  { allow: private, mutations: [create, update] }
  ])
  {
    id: ID!
    username: String!
    category: String
    assigned: Int
  }

type calEvent @model @auth(rules: [
  { allow: owner },
  { allow: groups, groups: ["Admins"], mutations: [create, update, delete], queries: [list, get] },
  { allow: groups, groups: ["Asst"], mutations: [create, update], queries: [list, get] },
  { allow: private, mutations: [create, update] }
  ])
  {
    id: ID!
    name: String!
    name2: String
    details: String
    start: String
    end: String
    time_of_day: String
    admin_notes: String
    emp_notes: String
    category: String
    color: String
    apt_num: String
    apt_status: String
    service_category: String
    owner2: String
    note_code: String
    created_by: String
  }

  type Subscription {
    newOnCreateCalEvent: calEvent @aws_subscribe(mutations: ["createCalEvent"])
    newOnUpdateCalEvent: calEvent @aws_subscribe(mutations: ["updateCalEvent"])
    newOnDeleteCalEvent: calEvent @aws_subscribe(mutations: ["deleteCalEvent"])
    techOnCreateCalEvent(category: String!): calEvent @aws_subscribe(mutations: ["createCalEvent"])
    techOnUpdateCalEvent(category: String!): calEvent @aws_subscribe(mutations: ["updateCalEvent"])
    techOnDeleteCalEvent(category: String!): calEvent @aws_subscribe(mutations: ["deleteCalEvent"])
    custOnCreateCalEvent(owner2: String!): calEvent @aws_subscribe(mutations: ["createCalEvent"])
    custOnUpdateCalEvent(owner2: String!): calEvent @aws_subscribe(mutations: ["updateCalEvent"])
    custOnDeleteCalEvent(owner2: String!): calEvent @aws_subscribe(mutations: ["deleteCalEvent"])
  }
